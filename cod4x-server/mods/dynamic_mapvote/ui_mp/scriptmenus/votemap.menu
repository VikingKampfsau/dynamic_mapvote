#include "ui/menudefinition.h";

//Menu Size
#define VOTE_BG_BORDER_SIZE		5

#define VOTE_RECT_MAX_W		(VOTEBUT_IMG_W*3 + VOTEBUT_IMG_GAP_X*2 + VOTE_BG_BORDER_SIZE*2)
#define VOTE_RECT_MAX_H		(VOTEBUT_IMG_H*3 + VOTEBUT_IMG_GAP_Y*2 + VOTE_BG_BORDER_SIZE*2)

#define VOTE_RECT_W		(VOTE_BG_BORDER_SIZE*2 + VOTEBUT_IMG_W*dvarInt(mapvote_columns) + dvarInt(mapvote_columns)*VOTEBUT_IMG_GAP_X - VOTEBUT_IMG_GAP_X)
#define VOTE_RECT_H		(VOTE_BG_BORDER_SIZE*2 + VOTEBUT_IMG_H*dvarInt(mapvote_rows) + dvarInt(mapvote_rows)*VOTEBUT_IMG_GAP_Y - VOTEBUT_IMG_GAP_Y)

#define VOTE_RECT_START_X		0
#define VOTE_RECT_START_Y		0

//Timer Window
#define VOTE_TIMER_H	32

//Vote Button		
#define VOTEBUT_IMG_W		171
#define VOTEBUT_IMG_H		94

#define VOTEBUT_IMG_START_X	0
#define VOTEBUT_IMG_START_Y	0

#define VOTEBUT_IMG_GAP_X	15
#define VOTEBUT_IMG_GAP_Y	15

#define VOTEBUT_NAME_START_X		(VOTEBUT_IMG_W/2)
#define VOTEBUT_NAME_START_Y		20

#define VOTEBUT_BORDER_SIZE		2

#define VOTEBUT_POS_X(pCol)		(VOTE_BG_BORDER_SIZE + (VOTEBUT_IMG_W + VOTEBUT_IMG_GAP_X)*(pCol-1))
#define VOTEBUT_POS_Y(pRow)		(VOTE_BG_BORDER_SIZE + (VOTEBUT_IMG_H + VOTEBUT_IMG_GAP_Y)*(pRow-1))

#define VOTEBUT_FIRST_POS_X		VOTE_BG_BORDER_SIZE //VOTEBUT_POS_X(1) is a waste of tokens; don't forget to adjust this when you change the definition of VOTEBUT_POS_X(pCol)
#define VOTEBUT_FIRST_POS_Y		VOTE_BG_BORDER_SIZE //VOTEBUT_POS_Y(1) is a waste of tokens; don't forget to adjust this when you change the definition of VOTEBUT_POS_Y(pRow)

#define TOTAL_CAST_VOTES (dvarint("votes_mapvote_map0")+dvarint("votes_mapvote_map1")+dvarint("votes_mapvote_map2")+dvarint("votes_mapvote_map3")+dvarint("votes_mapvote_map4")+dvarint("votes_mapvote_map5")+dvarint("votes_mapvote_map6")+dvarint("votes_mapvote_map7")+dvarint("votes_mapvote_map8"))

#define VOTE_BACKGROUND \
	itemDef \
	{ \
		name                      "window_background_1" \
		style                     WINDOW_STYLE_FILLED \
		rect                      0 0 VOTEBUT_IMG_W VOTEBUT_IMG_H HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		exp                       rect X ( 0 ) \
		exp                       rect Y ( 0 ) \
		exp                       rect W ( VOTE_RECT_W ) \
		exp                       rect H ( VOTE_RECT_H ) \
		backColor                 0 0 0 0.8 \
		visible					  1 \
		decoration \
	}

#define VOTE_TIMER \
	itemDef \
	{ \
		name                      "timer_background" \
		style                     WINDOW_STYLE_FILLED \
		rect                      0 0 VOTEBUT_IMG_W VOTEBUT_IMG_H HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		exp                       rect X ( 0 ) \
		exp                       rect Y ( 0 - (VOTE_TIMER_H+2) ) \
		exp                       rect W ( VOTE_RECT_W ) \
		exp                       rect H ( VOTE_TIMER_H ) \
		backColor                 0 0 0 0.8 \
		visible					  1 \
		decoration \
	} \
	itemDef \
	{ \
		name                      "timer" \
		type					  ITEM_TYPE_TEXT \
		rect                      0 0 VOTEBUT_IMG_W VOTEBUT_IMG_H HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		exp                       rect X ( 0 ) \
		exp                       rect Y ( 0 - (VOTE_TIMER_H+2) ) \
		exp                       rect W ( VOTE_RECT_W ) \
		exp                       rect H ( VOTE_TIMER_H ) \
		foreColor                 1 1 1 1 \
		backColor                 0 0 0 0.8 \
		exp 					  text ( "Remaining Time: " + secondsAsCountdown(int(COUNTDOWN_VOTETIME)) ); \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_LEGACY_CENTER \
		textAlignY                24 \
		textScale                 0.375 \
		visible					  when(COUNTDOWN_VOTETIME > 5) \
		decoration \
	} \
	itemDef \
	{ \
		name                      "timer" \
		type					  ITEM_TYPE_TEXT \
		rect                      0 0 VOTEBUT_IMG_W VOTEBUT_IMG_H HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		exp                       rect X ( 0 ) \
		exp                       rect Y ( 0 - (VOTE_TIMER_H+2) ) \
		exp                       rect W ( VOTE_RECT_W ) \
		exp                       rect H ( VOTE_TIMER_H ) \
		foreColor                 1 1 1 1 \
		backColor                 0 0 0 0.8 \
		exp 					  text ( "Remaining Time: " + secondsAsCountdown(int(COUNTDOWN_VOTETIME)) + "." + COUNTDOWN_VOTETIME_DOT ); \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_LEGACY_CENTER \
		textAlignY                24 \
		textScale                 0.375 \
		visible					  when(COUNTDOWN_VOTETIME < 5 && COUNTDOWN_VOTETIME >= 0) \
		decoration \
	} \
	itemDef \
	{ \
		name                      "timer_end" \
		type					  ITEM_TYPE_TEXT \
		rect                      0 0 VOTEBUT_IMG_W VOTEBUT_IMG_H HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		exp                       rect X ( 0 ) \
		exp                       rect Y ( 0 - (VOTE_TIMER_H+2) ) \
		exp                       rect W ( VOTE_RECT_W ) \
		exp                       rect H ( VOTE_TIMER_H ) \
		foreColor                 1 1 1 1 \
		backColor                 0 0 0 0.8 \
		exp 					  text ( LocString("@MPUI_NEXT_MAP") + ": " + dvarstring("mapvote_map"+int(dvarint(mapvote_winner)-1)+"_realname") ); \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_LEGACY_CENTER \
		textAlignY                24 \
		textScale                 0.375 \
		visible					  when(COUNTDOWN_VOTETIME < 0) \
		decoration \
	} /*\
	itemDef \
	{ \
		name                      "timer_until_menu_end" \
		type					  ITEM_TYPE_TEXT \
		rect                      0 0 VOTEBUT_IMG_W VOTEBUT_IMG_H HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		exp                       rect X ( 0 ) \
		exp                       rect Y ( 0 - (VOTE_TIMER_H+2) ) \
		exp                       rect W ( VOTE_RECT_W ) \
		exp                       rect H ( VOTE_TIMER_H ) \
		foreColor                 1 1 1 1 \
		backColor                 0 0 0 0.8 \
		exp 					  text ( secondsAsCountdown((COUNTDOWN_RESULTTIME)) + "." + COUNTDOWN_RESULTTIME_DOT ); \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_LEGACY_RIGHT \
		textAlignX                (0-VOTE_BG_BORDER_SIZE) \
		textAlignY                24 \
		textScale                 0.375 \
		visible					  when(COUNTDOWN_VOTETIME < 0 && (TIME_UNTIL_CLOSE - milliseconds()) >= 0) \
		decoration \
	} \
	itemDef \
	{ \
		name                      "timer_until_menu_end" \
		type					  ITEM_TYPE_TEXT \
		rect                      0 0 VOTEBUT_IMG_W VOTEBUT_IMG_H HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		exp                       rect X ( 0 ) \
		exp                       rect Y ( 0 - (VOTE_TIMER_H+2) ) \
		exp                       rect W (VOTE_RECT_W) \
		exp                       rect H ( VOTE_TIMER_H ) \
		foreColor                 1 1 1 1 \
		backColor                 0 0 0 0.8 \
		exp 					  text ( "0:00.0" ); \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_LEGACY_RIGHT \
		textAlignX                (0-VOTE_BG_BORDER_SIZE) \
		textAlignY                24 \
		textScale                 0.375 \
		visible					  when(COUNTDOWN_VOTETIME < 0 && (TIME_UNTIL_CLOSE - milliseconds()) < 0) \
		decoration \
	}*/

#define VOTEBUTTON(pIndex, pRow, pCol, pResponse) \
	itemDef \ //map preview image
	{ \
		rect                      0 0 VOTEBUT_IMG_W VOTEBUT_IMG_H HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_SHADER \
		border  	              0 \
		borderSize                1 \
		foreColor                 1 1 1 1 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textScale                 0.55 \
		exp                       material ( ( "mapvote_loadscreen_" + ( pIndex-1 ) ) ); \
		exp                       rect X ( VOTEBUT_POS_X(pCol) ); \
		exp                       rect Y ( VOTEBUT_POS_Y(pRow) ); \
		visible                   when( dvarint(mapvote_voteableItems) >= pIndex) \
		decoration \
	} \
	itemDef \ //gradient
	{ \
		rect                      0 0 VOTEBUT_IMG_W 17.5 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_SHADER \
		borderSize                1 \
		foreColor                 0 0 0 0.9 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		background                "gradient" \
		textScale                 0.55 \
		exp                       rect X ( VOTEBUT_POS_X(pCol) ); \
		exp                       rect Y ( VOTEBUT_POS_Y(pRow) ); \
		visible                   when ( dvarint(mapvote_voteableItems) >= pIndex ) \
		decoration \
	} \
	itemDef \ //map name
	{ \
		rect                      0 0 VOTEBUT_NAME_START_X VOTEBUT_NAME_START_Y HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 0.75 \
		backColor                 0 0 0 0.5 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_BOTTOM_LEFT \
		textAlignX                4 \
		textAlignY                0 \
		textScale                 0.35 \
		textStyle                 ITEM_TEXTSTYLE_SHADOWED \
		exp                       text ( ( dvarstring( pResponse"_realname" ) ) ); \
		exp                       rect X ( VOTEBUT_POS_X(pCol) ); \
		exp                       rect Y ( VOTEBUT_POS_Y(pRow) + (VOTEBUT_IMG_H - VOTEBUT_NAME_START_Y) ); \
		visible                   when( dvarint(mapvote_voteableItems) >= pIndex) \     
		decoration \
	} \
	itemDef \ //display for amount of votes for this map
	{ \
		rect                      0 0 VOTEBUT_NAME_START_X VOTEBUT_NAME_START_Y HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 0.75 \
		backColor                 0 0 0 0.5 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_BOTTOM_RIGHT \
		textAlignX                -4 \
		textAlignY                0 \
		textScale                 0.35 \
		textStyle                 ITEM_TEXTSTYLE_SHADOWED \
		exp                       text ( ( dvarint( "votes_"pResponse ) ) ); \
		exp                       rect X ( VOTEBUT_POS_X(pCol) + VOTEBUT_NAME_START_X ); \
		exp                       rect Y ( VOTEBUT_POS_Y(pRow) + (VOTEBUT_IMG_H - VOTEBUT_NAME_START_Y) ); \
		visible                   when( dvarint(mapvote_voteableItems) >= pIndex) \
		decoration \
	} \
	itemDef \ //mark what did I vote for
	{ \
		rect                      0 0 VOTEBUT_IMG_W VOTEBUT_IMG_H HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_SHADER \
		border  	              1 \
		borderSize                VOTEBUT_BORDER_SIZE \
		foreColor                 0 0 0 0 \
		backColor                 0 0 0 0 \
		borderColor               0.45 0 0 0.5 \
		outlineColor              0 0 0 0 \
		textScale                 0.55 \
		exp                       material ( "black" ); \
		exp                       rect X ( VOTEBUT_POS_X(pCol) ); \
		exp                       rect Y ( VOTEBUT_POS_Y(pRow) ); \
		visible                   when ( ( dvarint( "selected_map" ) == pIndex && dvarint(mapvote_voteableItems) >= pIndex ) ) \ \
		decoration \
	} \
	itemDef \ //mark the map with the most votes
	{ \
		rect                      0 0 VOTEBUT_IMG_W VOTEBUT_IMG_H HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_SHADER \
		border  	              1 \
		borderSize                VOTEBUT_BORDER_SIZE \
		foreColor                 0 0 0 0 \
		backColor                 0 0 0 0 \
		borderColor               0 0.45 0 0.5 \
		outlineColor              0 0 0 0 \
		textScale                 0.55 \
		exp                       material ( "black" ); \
		exp                       rect X ( VOTEBUT_POS_X(pCol) ); \
		exp                       rect Y ( VOTEBUT_POS_Y(pRow) ); \
		visible                   when ( dvarint(mapvote_winner) == pIndex ) \
		decoration \
	} \
	itemDef \ //vote button to cast a vote
	{ \
		rect                      0 0 VOTEBUT_IMG_W VOTEBUT_IMG_H HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 1 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		type                      ITEM_TYPE_BUTTON \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_LEGACY_CENTER \
		textAlignY                24 \
		textScale                 0.375 \
		text                      "" \
		exp                       rect X ( VOTEBUT_POS_X(pCol) ); \
		exp                       rect Y ( VOTEBUT_POS_Y(pRow) ); \
		mouseEnter                { play mouse_over ;  } \
		action                    { scriptmenuresponse pResponse; setDvar selected_map pIndex; } \
		visible                   when( dvarint(mapvote_voteableItems) >= pIndex) \
	}

#define ANIMATED_WINNER_IMG \ //animated winner preview image showing when the vote time is over
	itemDef \ //type 1: moving from button pos to center while resizing itself to the size of the vote background
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_SHADER \
		border  	              0 \
		borderSize                1 \
		foreColor                 1 1 1 1 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textScale                 0.55 \
		exp                       material ( ( "mapvote_loadscreen_" + ( dvarint(mapvote_winner)-1 ) ) ); \
		exp                       rect X ( VOTE_BG_BORDER_SIZE + VOTEBUT_FIRST_POS_X + WINNER_ANIM_XY((VOTE_RECT_W - WINNER_NEW_W)/2) ); \
		exp                       rect Y ( VOTE_BG_BORDER_SIZE + VOTEBUT_FIRST_POS_Y + WINNER_ANIM_XY((VOTE_RECT_H - WINNER_NEW_H)/2) ); \
		exp                       rect W ( WINNER_NEW_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2 ); \
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 1 && milliseconds() >= TIME_UNTIL_WINNER ) \
		decoration \
	} \
	itemDef \ //gradient
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_SHADER \
		borderSize                1 \
		foreColor                 0 0 0 0.6 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		background                "gradient_top" \
		textScale                 0.55 \
		exp                       rect X ( VOTE_BG_BORDER_SIZE + VOTEBUT_FIRST_POS_X + WINNER_ANIM_XY((VOTE_RECT_W - WINNER_NEW_W)/2) ); \
		exp                       rect Y ( VOTE_BG_BORDER_SIZE + VOTEBUT_FIRST_POS_Y + WINNER_ANIM_XY((VOTE_RECT_H - WINNER_NEW_H)/2) ); \
		exp                       rect W ( WINNER_NEW_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2)*0.3 ); \
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 1 && milliseconds() > TIME_UNTIL_WINNER ) \
		decoration \
	} \
	itemDef \ //display for amount of votes for this map
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 0.75 \
		backColor                 0 0 0 0.5 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_MIDDLE_LEFT \
		textAlignX                4 \
		textAlignY                0 \
		textScale                 0.35 \
		textStyle                 ITEM_TEXTSTYLE_SHADOWED \
		exp                       text ( dvarstring("mapvote_map"+(dvarint(mapvote_winner)-1)+"_realname") + " has won with " + dvarint("votes_mapvote_map"+(dvarint(mapvote_winner)-1)) + " votes (" + WINNER_VOTE_PERCENTAGE + "% of all votes)" ); \
		exp                       rect X ( VOTE_BG_BORDER_SIZE + VOTEBUT_FIRST_POS_X + WINNER_ANIM_XY((VOTE_RECT_W - WINNER_NEW_W)/2) ); \
		exp                       rect Y ( VOTE_BG_BORDER_SIZE*2 + VOTEBUT_FIRST_POS_Y + WINNER_ANIM_XY((VOTE_RECT_H - WINNER_NEW_H)/2) + (WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2)*0.88 ); \
		exp                       rect W ( WINNER_NEW_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2)*0.12 ); 	\
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 1 && milliseconds() > TIME_UNTIL_WINNER ) \
		decoration \
	} \
	itemDef \ //display the remaining time until the menu closes
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 0.75 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_MIDDLE_RIGHT \
		textAlignX                -4 \
		textAlignY                0 \
		textScale                 0.35 \
		textStyle                 ITEM_TEXTSTYLE_SHADOWED \
		exp                       text ( secondsAsCountdown((COUNTDOWN_RESULTTIME)) + "." + COUNTDOWN_RESULTTIME_DOT ); \
		exp                       rect X ( VOTE_BG_BORDER_SIZE + VOTEBUT_FIRST_POS_X + WINNER_ANIM_XY((VOTE_RECT_W - WINNER_NEW_W)/2) ); \
		exp                       rect Y ( VOTE_BG_BORDER_SIZE*2 + VOTEBUT_FIRST_POS_Y + WINNER_ANIM_XY((VOTE_RECT_H - WINNER_NEW_H)/2) + (WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2)*0.88 ); \
		exp                       rect W ( WINNER_NEW_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2)*0.12 ); 	\
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 1 && milliseconds() > TIME_UNTIL_WINNER && (TIME_UNTIL_CLOSE - milliseconds()) >= 0 ) \
		decoration \
	} \
	itemDef \ //display the remaining time until the menu closes
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 0.75 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_MIDDLE_RIGHT \
		textAlignX                -4 \
		textAlignY                0 \
		textScale                 0.35 \
		textStyle                 ITEM_TEXTSTYLE_SHADOWED \
		exp                       text ( "0:00.0" ); \
		exp                       rect X ( VOTE_BG_BORDER_SIZE + VOTEBUT_FIRST_POS_X + WINNER_ANIM_XY((VOTE_RECT_W - WINNER_NEW_W)/2) ); \
		exp                       rect Y ( VOTE_BG_BORDER_SIZE*2 + VOTEBUT_FIRST_POS_Y + WINNER_ANIM_XY((VOTE_RECT_H - WINNER_NEW_H)/2) + (WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2)*0.88 ); \
		exp                       rect W ( WINNER_NEW_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2)*0.12 ); 	\
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 1 && milliseconds() > TIME_UNTIL_WINNER && (TIME_UNTIL_CLOSE - milliseconds()) < 0) \
		decoration \
	} \
	itemDef \ //type 2: resizing from left side (already full height)
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_SHADER \
		border  	              0 \
		borderSize                1 \
		foreColor                 1 1 1 1 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textScale                 0.55 \
		exp                       material ( ( "mapvote_loadscreen_" + ( dvarint(mapvote_winner)-1 ) ) ); \
		exp                       rect X ( VOTEBUT_FIRST_POS_X ); \
		exp                       rect Y ( VOTEBUT_FIRST_POS_Y ); \
		exp                       rect W ( WINNER_NEW_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( VOTE_RECT_H - VOTE_BG_BORDER_SIZE*2 ); \
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 2 && milliseconds() >= TIME_UNTIL_WINNER ) \
		decoration \
	} \
	itemDef \ //gradient
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_SHADER \
		borderSize                1 \
		foreColor                 0 0 0 0.6 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		background                "gradient_top" \
		textScale                 0.55 \
		exp                       rect X ( VOTEBUT_FIRST_POS_X ); \
		exp                       rect Y ( VOTEBUT_FIRST_POS_Y ); \
		exp                       rect W ( WINNER_NEW_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (VOTE_RECT_H - VOTE_BG_BORDER_SIZE*2)*0.3 ); \
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 2 && milliseconds() > TIME_UNTIL_WINNER ) \
		decoration \
	} \
	itemDef \ //display for amount of votes for this map
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 0.75 \
		backColor                 0 0 0 0.5 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_MIDDLE_LEFT \
		textAlignX                4 \
		textAlignY                0 \
		textScale                 0.35 \
		textStyle                 ITEM_TEXTSTYLE_SHADOWED \
		exp                       text ( dvarstring("mapvote_map"+(dvarint(mapvote_winner)-1)+"_realname") + " has won with " + dvarint("votes_mapvote_map"+(dvarint(mapvote_winner)-1)) + " votes (" + WINNER_VOTE_PERCENTAGE + "% of all votes)" ); \
		exp                       rect X ( VOTEBUT_FIRST_POS_X ); \
		exp                       rect Y ( VOTEBUT_FIRST_POS_Y + (VOTE_RECT_H - VOTE_BG_BORDER_SIZE*2)*0.88 ); \
		exp                       rect W ( WINNER_NEW_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (VOTE_RECT_H - VOTE_BG_BORDER_SIZE)*0.12 ); \
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 2 && milliseconds() > TIME_UNTIL_WINNER ) \
		decoration \
	} \
	itemDef \ //display the remaining time until the menu closes
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 0.75 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_MIDDLE_RIGHT \
		textAlignX                -4 \
		textAlignY                0 \
		textScale                 0.35 \
		textStyle                 ITEM_TEXTSTYLE_SHADOWED \
		exp                       text ( secondsAsCountdown((COUNTDOWN_RESULTTIME)) + "." + COUNTDOWN_RESULTTIME_DOT ); \
		exp                       rect X ( VOTEBUT_FIRST_POS_X ); \
		exp                       rect Y ( VOTEBUT_FIRST_POS_Y + (VOTE_RECT_H - VOTE_BG_BORDER_SIZE*2)*0.88 ); \
		exp                       rect W ( WINNER_NEW_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (VOTE_RECT_H - VOTE_BG_BORDER_SIZE)*0.12 ); \
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 2 && milliseconds() > TIME_UNTIL_WINNER && (TIME_UNTIL_CLOSE - milliseconds()) >= 0 ) \
		decoration \
	} \
	itemDef \ //display the remaining time until the menu closes
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 0.75 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_MIDDLE_RIGHT \
		textAlignX                -4 \
		textAlignY                0 \
		textScale                 0.35 \
		textStyle                 ITEM_TEXTSTYLE_SHADOWED \
		exp                       text ( "0:00.0" ); \
		exp                       rect X ( VOTEBUT_FIRST_POS_X ); \
		exp                       rect Y ( VOTEBUT_FIRST_POS_Y + (VOTE_RECT_H - VOTE_BG_BORDER_SIZE*2)*0.88 ); \
		exp                       rect W ( WINNER_NEW_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (VOTE_RECT_H - VOTE_BG_BORDER_SIZE)*0.12 ); \
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 2 && milliseconds() > TIME_UNTIL_WINNER && (TIME_UNTIL_CLOSE - milliseconds()) < 0 ) \
		decoration \
	} \
	itemDef \ //type 3: resizing from top (already full width)
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_SHADER \
		border  	              0 \
		borderSize                1 \
		foreColor                 1 1 1 1 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textScale                 0.55 \
		exp                       material ( ( "mapvote_loadscreen_" + ( dvarint(mapvote_winner)-1 ) ) ); \
		exp                       rect X ( VOTEBUT_FIRST_POS_X ); \
		exp                       rect Y ( VOTEBUT_FIRST_POS_Y ); \
		exp                       rect W ( VOTE_RECT_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2 ); \
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 3 && milliseconds() >= TIME_UNTIL_WINNER ) \
		decoration \
	} \
	itemDef \ //gradient
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_SHADER \
		borderSize                1 \
		foreColor                 0 0 0 0.6 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		background                "gradient_top" \
		textScale                 0.55 \
		exp                       rect X ( VOTEBUT_FIRST_POS_X ); \
		exp                       rect Y ( VOTEBUT_FIRST_POS_Y ); \
		exp                       rect W ( VOTE_RECT_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2)*0.3 ); \
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 3 && milliseconds() > TIME_UNTIL_WINNER ) \
		decoration \
	} \
	itemDef \ //display for amount of votes for this map
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 0.75 \
		backColor                 0 0 0 0.5 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_MIDDLE_LEFT \
		textAlignX                4 \
		textAlignY                0 \
		textScale                 0.35 \
		textStyle                 ITEM_TEXTSTYLE_SHADOWED \
		exp                       text ( dvarstring("mapvote_map"+(dvarint(mapvote_winner)-1)+"_realname") + " has won with " + dvarint("votes_mapvote_map"+(dvarint(mapvote_winner)-1)) + " votes (" + WINNER_VOTE_PERCENTAGE + "% of all votes)" ); \
		exp                       rect X ( VOTEBUT_FIRST_POS_X ); \
		exp                       rect Y ( VOTEBUT_FIRST_POS_Y + (WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2)*0.88 ); \
		exp                       rect W ( VOTE_RECT_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (WINNER_NEW_H - VOTE_BG_BORDER_SIZE)*0.12 ); \	
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 3 && milliseconds() > TIME_UNTIL_WINNER ) \
		decoration \
	} \
	itemDef \ //display the remaining time until the menu closes
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 0.75 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_MIDDLE_RIGHT \
		textAlignX                -4 \
		textAlignY                0 \
		textScale                 0.35 \
		textStyle                 ITEM_TEXTSTYLE_SHADOWED \
		exp                       text ( secondsAsCountdown((COUNTDOWN_RESULTTIME)) + "." + COUNTDOWN_RESULTTIME_DOT ); \
		exp                       rect X ( VOTEBUT_FIRST_POS_X ); \
		exp                       rect Y ( VOTEBUT_FIRST_POS_Y + (WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2)*0.88 ); \
		exp                       rect W ( VOTE_RECT_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (WINNER_NEW_H - VOTE_BG_BORDER_SIZE)*0.12 ); \	
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 3 && milliseconds() > TIME_UNTIL_WINNER && (TIME_UNTIL_CLOSE - milliseconds()) >= 0 ) \
		decoration \
	} \
	itemDef \ //display the remaining time until the menu closes
	{ \
		rect                      0 0 0 0 HORIZONTAL_ALIGN_SUBLEFT VERTICAL_ALIGN_SUBTOP \
		style                     WINDOW_STYLE_FILLED \
		borderSize                1 \
		foreColor                 1 1 1 0.75 \
		backColor                 0 0 0 0 \
		borderColor               0 0 0 0 \
		outlineColor              0 0 0 0 \
		textFont                  UI_FONT_NORMAL \
		textAlign                 ITEM_ALIGN_MIDDLE_RIGHT \
		textAlignX                -4 \
		textAlignY                0 \
		textScale                 0.35 \
		textStyle                 ITEM_TEXTSTYLE_SHADOWED \
		exp                       text ( "0:00.0" ); \
		exp                       rect X ( VOTEBUT_FIRST_POS_X ); \
		exp                       rect Y ( VOTEBUT_FIRST_POS_Y + (WINNER_NEW_H - VOTE_BG_BORDER_SIZE*2)*0.88 ); \
		exp                       rect W ( VOTE_RECT_W - VOTE_BG_BORDER_SIZE*2 ); \
		exp                       rect H ( (WINNER_NEW_H - VOTE_BG_BORDER_SIZE)*0.12 ); \	
		visible                   when ( dvarint(mapvote_winner) > 0 && dvarInt(mapvote_winner_display) == 3 && milliseconds() > TIME_UNTIL_WINNER && (TIME_UNTIL_CLOSE - milliseconds()) < 0 ) \
		decoration \
	}

{
	// TIME / TIMERS
	#define TIME_MENU_OPENED	dvarInt(menuOpenTime)
	#define TIME_VOTETIME		dvarInt(mapvote_votetime)
	#define TIME_UNTIL_WINNER	(TIME_MENU_OPENED + ANIM_MOVESPEED + TIME_VOTETIME + WINNER_SHOW_DELAY)

	#define TIME_UNTIL_CLOSE	(TIME_MENU_OPENED + ANIM_MOVESPEED + TIME_VOTETIME + WINNER_SHOW_DELAY + WINNER_ANIM_MOVESPEED + RESULT_SHOW_TIME)
	#define TIME_MENU_CLOSED	(TIME_UNTIL_CLOSE + ANIM_MOVESPEED)

	#define RESULT_SHOW_TIME	dvarInt(mapvote_resulttime)
	#define WINNER_SHOW_DELAY	dvarInt(mapvote_resultdelay)

	#define COUNTDOWN_VOTETIME			((TIME_MENU_OPENED + TIME_VOTETIME - milliseconds())/1000)
	#define COUNTDOWN_VOTETIME_DOT		(0+(int(COUNTDOWN_VOTETIME*10)%10))
	#define COUNTDOWN_RESULTTIME		int(int(TIME_UNTIL_CLOSE - milliseconds())/1000)
	#define COUNTDOWN_RESULTTIME_DOT	((int((int(TIME_UNTIL_CLOSE - milliseconds())/1000)*10)%10))
	
	// ANIMATION
	//menuDef: in & out movement
	#define MOVEOUT_DIR			(0-1)	//(0+1) = to the side it came in from, (0-1) = opposite side
	#define ANIM_MOVESPEED		600 	//milliseconds
	#define ANIM_DIST			800		//units
	#define ANIM_DO_MOVEOUT		dvarInt(mapvote_anim_moveout) //0 = false, 1 = true; is set in gsc
	
	#define ZERO_TO_ONE_IN		milliseconds()-TIME_MENU_OPENED
	#define UNIT_GROWTH_IN		sin(sin(min(ZERO_TO_ONE_IN,ANIM_MOVESPEED)*(1.5707/ANIM_MOVESPEED))*1.5707)
	
	#define ZERO_TO_ONE_OUT		TIME_MENU_OPENED+ANIM_MOVESPEED+TIME_VOTETIME+WINNER_SHOW_DELAY+WINNER_ANIM_MOVESPEED+RESULT_SHOW_TIME+ANIM_MOVESPEED-milliseconds()
	#define UNIT_GROWTH_OUT		sin(sin(min(ZERO_TO_ONE_OUT,ANIM_MOVESPEED)*(1.5707/ANIM_MOVESPEED))*1.5707)
    
	#define FRAME_ANIMATE_IN(offset)	(offset-(offset*UNIT_GROWTH_IN))
	#define FRAME_ANIMATE_OUT(offset)	((offset-(offset*UNIT_GROWTH_OUT))*ANIM_DO_MOVEOUT*MOVEOUT_DIR)

	//itemDef: winner movement to center and resizement	
	#define WINNER_ANIM_MOVESPEED	800 	//milliseconds
	
	#define ZERO_TO_ONE_CENTER		milliseconds()-TIME_MENU_OPENED-ANIM_MOVESPEED-TIME_VOTETIME-WINNER_SHOW_DELAY
	#define UNIT_GROWTH_CENTER_WH	sin(sin(min(ZERO_TO_ONE_CENTER,WINNER_ANIM_MOVESPEED)*(1.5707/WINNER_ANIM_MOVESPEED))*1.5707)

	#define WINNER_ANIM_XY(offset)		(int(offset)*UNIT_GROWTH_CENTER_WH)
	#define WINNER_ANIM_WH(resize)		(int(resize)*UNIT_GROWTH_CENTER_WH)

	#define WINNER_NEW_W 	(VOTEBUT_IMG_W+WINNER_ANIM_WH(VOTE_RECT_W-VOTEBUT_IMG_W))
	#define WINNER_NEW_H	(VOTEBUT_IMG_H+WINNER_ANIM_WH(VOTE_RECT_H-VOTEBUT_IMG_H))

	#define WINNER_VOTE_PERCENTAGE	 int(0+((dvarint("votes_mapvote_map"+(dvarint(mapvote_winner)-1))/TOTAL_CAST_VOTES)*100)) + "." + int(0+(((dvarint("votes_mapvote_map"+(dvarint(mapvote_winner)-1))/TOTAL_CAST_VOTES)*10000)%100))

	//not used but maybe useful for anything later
	//calculates in which row/column the winner button is located in
	#define GET_WINNER_COL	int(0.49+dvarInt(mapvote_winner)/3) //top or ceil does not exist
	#define GET_WINNER_ROW	(int(((dvarInt(mapvote_winner)-0.5)%3)-0.49)+1)

	menuDef
    {
		name						"votemap"
		rect						0 0 VOTE_RECT_MAX_W VOTE_RECT_MAX_H HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_CENTER
		exp							rect X (VOTE_RECT_START_X - VOTE_RECT_W/2 + FRAME_ANIMATE_IN(ANIM_DIST) + FRAME_ANIMATE_OUT(ANIM_DIST))
		exp							rect Y (VOTE_RECT_START_Y - VOTE_RECT_H/2)
		foreColor					1 1 1 1
		backColor					0 0 0 0
		borderColor					0 0 0 0
		outlineColor				0 0 0 0
		blurWorld					7
		focusColor					0 0 0 0
		disableColor				0 0 0 0
		visible						when(milliseconds() <= TIME_MENU_CLOSED)                 
        onOpen
		{
			setDvar cl_bypassmouseinput 0;
		
			//animation start marker
			exec "setdvartotime menuOpenTime";
			
			//reset the menu move out anim dvar
			exec "set mapvote_anim_moveout 0";
			
			//reset the players last vote
			exec "set selected_map 0";

			//import the values from precompiled config
			exec "exec dynamic_mapvote.cfg";
		}
        onClose
		{
			setDvar cl_bypassmouseinput 0;
		}
        onESC
		{
		}
		
		// Background & Timer
		VOTE_TIMER
		VOTE_BACKGROUND
		
		//Vote Buttons
		VOTEBUTTON(1, 1, 1, "mapvote_map0")
		VOTEBUTTON(2, 1, 2, "mapvote_map1")
		VOTEBUTTON(3, 1, 3, "mapvote_map2")
		VOTEBUTTON(4, 2, 1, "mapvote_map3")
		VOTEBUTTON(5, 2, 2, "mapvote_map4")
		VOTEBUTTON(6, 2, 3, "mapvote_map5")
		VOTEBUTTON(7, 3, 1, "mapvote_map6")
		VOTEBUTTON(8, 3, 2, "mapvote_map7")
		VOTEBUTTON(9, 3, 3, "mapvote_map8")
		
		//Show the winner when the vote is over
		ANIMATED_WINNER_IMG
	}
}
